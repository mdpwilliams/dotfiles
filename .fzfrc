# /usr/bin/zsh
# Configuration options
export FZF_COMPLETION_TRIGGER='~~'
export FZF_COMPLETION_OTPS='+c -x'

export FZF_DEFAULT_COMMAND='ag -g "" -p ~/.ignore'
export FZF_DEFAULT_OPTS='--reverse --height 60% --border'

# Changing Directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# opening files

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# z integration

unset -f z > /dev/null 2>&1
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}

zz() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}

alias j=z
alias jj=zz

# command history
# fh - Find a previous command and run it immediately
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fhe - Find a previous command and print it out to the prompt for editting
fhe() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# git integration

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fadd - add file to staging
fadd() {
  local files
  files=$(git ls-files --exclude-standard -dmo | awk '{print $1}') || return
  file=$(echo "$files" |
    fzf-tmux -d $(( 2 + $(wc -l <<< "$files") )) +m -1 -0 --query=$1) || return
  git add $( echo "$file" )
}

# fpatch - add file hunk to staging
fpatch() {
  local files
  files=$(git ls-files --exclude-standard -dmo | awk '{print $1}') || return
  file=$(echo "$files" |
    fzf-tmux -d $(( 2 + $(wc -l <<< "$files") )) +m -1 -0 --query=$1) || return
  git add --patch $( echo "$file" )
}

# freset - unstage file
freset() {
  local files
  files=$(git ls-files --exclude-standard -s | awk '{print $1}') || return
  file=$(echo "$files" |
    fzf-tmux -d $(( 2 + $(wc -l <<< "$files") )) +m -1 -0 --query=$1) || return
  git reset HEAD $( echo "$file" )
}

# fco - checkout git branch/tag; rewrite this to use Ag
fco() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}
